// Importation du module express
import express from 'express';

// Création d'un routeur express
const router = express.Router();

// Données initiales sous forme d'objet JSON
const data = [
  {
    id: 1,
    name: "franck",
    email: "franck@yahoo.com"
  },
  {
    id: 2,
    name: "Thierno",
    email: "Thierno@yahoo.com",
  },
  {
    id: 3,
    name: "Marguerite",
    email: "Marguerite@yahoo.com",
  },
    {
    id: 4,
    name: "Celia",
    email: "Celia@yahoo.com",
  },
  {
    id: 5,
    name: "Jocelyn",
    email: "Jocelyn@yahoo.com",
  },
        {
    id: 6,
    name: "Xavier",
    email: "Xavier@yahoo.com",
  },
  {
    id: 7,
    name: "Bouba",
    email: "Bouba@yahoo.com",
  },
  {
    id: 8,
    name: "Kevin",
    email: "Kevin@yahoo.com",
  },
  {
    id: 9,
    name: "Rachida",
    email: "Rachida@yahoo.com",
  },
  {
    id: 10,
    name: "Francis",
    email: "Francis@yahoo.com",
  },
    {
    id: 11,
    name: "Djamal",
    email: "Djamal@yahoo.com",
  },
  {
    id: 12,
    name: "Richard",
    email: "Richard@yahoo.com",
  },
  {
    id: 13,
    name: "Virginie",
    email: "Virginie@yahoo.com",
  },
  {
    id: 14,
    name: "Noran",
    email: "Noran@yahoo.com",
  },
  {
    id: 15,
    name: "David",
    email: "David@yahoo.com",
  },
  {
    id: 16,
    name: "Aaron",
    email: "Aaron@yahoo.com",
  },
  {
    id: 17,
    name: "Geraldine",
    email: "Geraldine@yahoo.com",
  },
];


// Route GET pour récupérer tous les utilisateurs
router.get("/all", (req, res) => {
  res.status(200).json(data);
});

// Route POST pour ajouter un nouvel utilisateur
router.post('/add', (req, res) => {
  // La route POST doit permettre d'ajouter un nouvel utilisateur et renvoyer une réponse JSON du tableau (data).
  data.push(req.body);
  res.status(201).json(data);
});

// Route DELETE pour supprimer un utilisateur par son ID
router.delete('/delete/:id', (req, res) => {
  console.log(req.params);
  // Filtrage du tableau pour supprimer un utilisateur
  const { id } = req.params;
  // Utilisation de la fonction some pour vérifier si l'utilisateur existe
  const checkParams = data.some((user) => user.id ==  id);

  if(checkParams){
    // Filtrage des données pour obtenir un nouveau tableau sans l'utilisateur supprimé
    const newData = data.filter(user => user.id != id);
    res.status(200).json(newData);
  }

  if(checkParams === false){
    res.status(404).json({ message: "user not found !" });
  }
});

// Route PUT pour mettre à jour les informations d'un utilisateur par son ID
router.put('/update/:id', (req, res) => {
  const { id } = req.params;
  const { name } = req.body;

  // Vérification si l'utilisateur existe dans le tableau
  const checkParams =  data.some(user => user.id == id);
  
  if(checkParams){
    // Mise à jour du nom de l'utilisateur
    let result = data.filter(user => {
      if(user.id == id) {
        user.name = name;
      }
      return user;
    });
    res.status(200).json(result);
  }

  if(!checkParams)
  {
    res.status(404).json({ message: 'user not found !'});
  }
});

// Exportation du routeur pour une utilisation dans d'autres fichiers
export default router;

---------------------------------------------------------------------------------------

LUNDI 19 FÉVRIER

"Ligne d importation " import data from "./data.json" assert { type: "json" };

**Récupération de Tous les Articles :**
- Configurez une route pour récupérer la liste de tous les articles de chaussures
disponibles dans la boutique.

 **Récupération d'un Article Unique :**
- Mettez en place une route pour récupérer les détails d'un article spécifique en utilisant son identifiant unique.

 **Récupération d'articles :**
- Mettez en place une route pour récupérer les articles pour femme 

 **Récupération d'articles :**
- Mettez en place une route pour récupérer les articles pour homme

 **Récupération d'articles :**
- Mettez en place une route pour récupérer les articles par categorie


 **DELETE d'article :**
- Mettez en place une route pour supprimer un article

 **UPDATE d'article :**
- Mettez en place une route qui permet de modifier le statut 'online' d'un article